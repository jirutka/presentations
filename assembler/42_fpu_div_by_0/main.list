GAS LISTING main.s 			page 1


   1              	# asmsyntax=as
   2              	
   3              	# Program pro otestovani deleni nulou
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	.intel_syntax noprefix
   9              	
  10              	
  11              	
  12              	# Nacteni definice makra pro ukonceni aplikace
  13              	.include "exit.s"
   1              	# asmsyntax=as
   2              	
   3              	# Makro pro ukonceni procesu v Linuxu.
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	sys_exit   = 1                       # cislo syscallu pro ukonceni procesu
   9              	
  10              	# Deklarace makra pro ukonceni aplikace
  11              	.macro exit
  12              	        mov   eax, sys_exit          # cislo sycallu pro funkci "exit"
  13              	        mov   ebx, 0                 # exit code = 0
  14              	        int   0x80                   # volani Linuxoveho kernelu
  15              	.endm
  16              	
  14              	
  15              	# Nacteni maker pro (opakovany) tisk zpravy i prislusne subrutiny
  16              	.include "writeMessage.s"
   1              	# asmsyntax=as
   2              	
   3              	# Makro pro tisk zpravy na standardni vystup.
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	# Linux kernel system call table
   9              	sys_write  = 4
  10              	std_output = 1
  11              	
  12              	
  13              	
  14              	# Deklarace makra pro vytisteni zpravy na standardni vystup
  15              	.macro writeMessage message,messageLength
  16              	        mov   ecx, offset \message   # adresa retezce, ktery se ma vytisknout
  17              	        mov   edx, \messageLength    # pocet znaku, ktere se maji vytisknout
  18              	        call  write_message          # vytisknout zpravu "Zero flag not set"
  19              	.endm
  20              	
  21              	
  22              	
  23              	# Podprogram pro vytisteni zpravy na standardni vystup
  24              	# Ocekava se, ze v ecx bude adresa zpravy a v edx jeji delka
  25              	write_message:
GAS LISTING main.s 			page 2


  26 0000 B8040000 	        mov   eax, sys_write         # cislo syscallu pro funkci "write"
  26      00
  27 0005 BB010000 	        mov   ebx, std_output        # standardni vystup
  27      00
  28 000a CD80     	        int   0x80
  29 000c C3       	        ret
  30              	
  31              	
  32              	
  33              	# Deklarace makra pro vytisteni znaku konce radku (provede se tedy odradkovani)
  34              	.macro println
  35              	        writeMessage printlnMessage,printlnLength
  36              	.endm
  37              	
  38              	
  39              	
  40              	#-----------------------------------------------------------------------------
  41              	.section .data
  42              	# Miniretezec pouzivany makrem println
  43              	printlnMessage:
  44 0000 0A00     	        .string "\n"
  45              	printlnLength = $ - printlnMessage
  46              	
  17              	
  18              	# Nacteni makra pro vytisteni hexadecimalni 32bitove hodnoty
  19              	# spolecne s makrem je nactena i prislusna subrutina
  20              	.include "printHexNumber.s"
   1              	# asmsyntax=as
   2              	
   3              	# Makro pro pripravu a tisk hexadecimalni hodnoty na standardni vystup.
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	.intel_syntax noprefix
   9              	
  10              	
  11              	
  12              	# Makro pro vypis 32bitove hexadecimalni hodnoty na standardni vystup
  13              	# Jedinym parametrem makra je hodnota (konstanta)
  14              	.macro printHexNumber value
  15              	        pusha                              # uschovat vsechny registry na zasobnik
  16              	        mov  edx, \value                   # hodnotu pro tisk ulozit do registru EDX
  17              	        mov  ebx, offset hexValueTemplate  # adresu pro retezec ulozit do registru EBX
  18              	        call hex2string                    # zavolani prislusne subrutiny pro prevod na string
  19              	        writeMessage hexValueMessage, hexValueMessageLen # retezec je naplnen, tak ho muzeme vytisk
  20              	        popa                               # obnovit obsah vsech registru
  21              	.endm
  22              	
  23              	
  24              	
  25              	#-----------------------------------------------------------------------------
  26              	.section .data
  27              	hexValueMessage:
  28 0002 48657820 	        .string "Hex value: 0x"             # prvni cast zpravy
  28      76616C75 
  28      653A2030 
GAS LISTING main.s 			page 3


  28      7800
  29              	hexValueTemplate:                           # druha cast zpravy ma vlastni navesti
  30 0010 3F3F3F3F 	        .string "????????\n"                # otazniky budou prepsany
  30      3F3F3F3F 
  30      0A00
  31              	hexValueMessageLen = $ - hexValueMessage    # delka zpravy
  32              	
  33              	
  34              	
  35              	#-----------------------------------------------------------------------------
  36              	.section .text
  37              	
  38              	# Subrutina urcena pro prevod 32bitove hexadecimalni hodnoty na retezec
  39              	# Vstup: EDX - hodnota, ktera se ma prevest na retezec
  40              	#        EBX - adresa jiz drive alokovaneho retezce (resp. osmice bajtu)
  41              	hex2string:
  42 000d B108     	                  mov cl,  8                # pocet opakovani smycky
  43              	
  44 000f C1C204   	print_one_digit:  rol edx, 4                # rotace doleva znamena, ze se do spodnich 4 bitu nasun
  45 0012 88D0     	                  mov al, dl                # nechceme porusit obsah vstupni hodnoty v EDX, proto p
  46 0014 240F     	                  and al, 0x0f              # maskovani, potrebujeme pracovat jen s jednou cifrou
  47 0016 3C0A     	                  cmp al, 10                # je cifra vetsi nebo rovna 10?
  48 0018 7C02     	                  jl  store_digit           # neni, pouze prevest 0..9 na ASCII hodnotu '0'..'9'
  49              	
  50 001a 0407     	alpha_digit:      add al, 'A'-10-'0'        # prevod hodnoty 10..15 na znaky 'A'..'F'
  51              	
  52 001c 0430     	store_digit:      add al, '0'
  53 001e 8803     	                  mov byte ptr [ebx], al    # ulozeni cifry do retezce
  54 0020 43       	                  inc ebx                   # dalsi ulozeni v retezci o znak dale
  55 0021 FEC9     	                  dec cl                    # snizeni pocitadla smycky
  56 0023 75EA     	                  jnz print_one_digit       # a opakovani smycky, dokud se nedosahlo nuly
  57              	
  58 0025 C3       	                  ret                       # navrat ze subrutiny
  59              	
  21              	
  22              	
  23              	
  24              	#-----------------------------------------------------------------------------
  25              	.section .data
  26              	fpuDivideByZeroMessage:
  27 001a 312F303A 	        .string "1/0:   "                        # zprava
  27      20202000 
  28              	fpuDivideByZeroMessageLength = $ - fpuDivideByZeroMessage   # delka zpravy
  29              	
  30              	fpuDivideByNegativeZeroMessage:
  31 0022 2D312F30 	        .string "-1/0:  "                        # zprava
  31      3A202000 
  32              	fpuDivideByNegativeZeroMessageLength = $ - fpuDivideByNegativeZeroMessage   # delka zpravy
  33              	
  34              	fpuDivideZeroByZeroMessage:
  35 002a 302F303A 	        .string "0/0:   "                        # zprava
  35      20202000 
  36              	fpuDivideZeroByZeroMessageLength = $ - fpuDivideZeroByZeroMessage   # delka zpravy
  37              	
  38              	
  39              	
  40              	#-----------------------------------------------------------------------------
GAS LISTING main.s 			page 4


  41              	.section .bss
  42              	
  43              	.lcomm number, 4                     # na toto misto se bude ukladat konstanta typu float
  44              	
  45              	
  46              	
  47              	#-----------------------------------------------------------------------------
  48              	.section .text
  49              	        .global _start               # tento symbol ma byt dostupny i linkeru
  50              	
  51              	_start:
  52              	        writeMessage fpuDivideByZeroMessage, fpuDivideByZeroMessageLength
  52 0026 B91A0000 	>  mov ecx,offset fpuDivideByZeroMessage
  52      00
  52 002b BA080000 	>  mov edx,fpuDivideByZeroMessageLength
  52      00
  52 0030 E8CBFFFF 	>  call write_message
  52      FF
  53              	
  54 0035 D9E8     	        fld1                         # nacteni FP konstanty 1.0
  55 0037 D9EE     	        fldz                         # nacteni FP konstanty 0.0
  56 0039 DEF9     	        fdivp                        # deleni nulou
  57 003b D91D0000 	        fstp dword ptr number        # ulozeni do pameti (4 bajty)
  57      0000
  58 0041 A1000000 	        mov  eax, dword ptr number   # nacteni hodnoty, tentokrat to celociselneho registru
  58      00
  59              	        printHexNumber eax           # vytiskneme celociselnou hodnotu v hexa tvaru
  59 0046 60       	>  pusha 
  59 0047 89C2     	>  mov edx,eax
  59 0049 BB100000 	>  mov ebx,offset hexValueTemplate
  59      00
  59 004e E8BAFFFF 	>  call hex2string
  59      FF
  59              	>  writeMessage hexValueMessage,hexValueMessageLen
  59 0053 B9020000 	>>  mov ecx,offset hexValueMessage
  59      00
  59 0058 BA180000 	>>  mov edx,hexValueMessageLen
  59      00
  59 005d E89EFFFF 	>>  call write_message
  59      FF
  59 0062 61       	>  popa 
  60              	
  61              	
  62              	
  63              	        writeMessage fpuDivideByNegativeZeroMessage, fpuDivideByNegativeZeroMessageLength
  63 0063 B9220000 	>  mov ecx,offset fpuDivideByNegativeZeroMessage
  63      00
  63 0068 BA080000 	>  mov edx,fpuDivideByNegativeZeroMessageLength
  63      00
  63 006d E88EFFFF 	>  call write_message
  63      FF
  64              	
  65 0072 D9E8     	        fld1                         # nacteni FP konstanty 1.0
  66 0074 D9EE     	        fldz                         # nacteni FP konstanty 0.0
  67 0076 D9E0     	        fchs                         # zmena znamenka nuly
  68 0078 DEF9     	        fdivp                        # deleni zapornou nulou
  69 007a D91D0000 	        fstp dword ptr number        # ulozeni do pameti (4 bajty)
GAS LISTING main.s 			page 5


  69      0000
  70 0080 A1000000 	        mov  eax, dword ptr number   # nacteni hodnoty, tentokrat to celociselneho registru
  70      00
  71              	        printHexNumber eax           # vytiskneme celociselnou hodnotu v hexa tvaru
  71 0085 60       	>  pusha 
  71 0086 89C2     	>  mov edx,eax
  71 0088 BB100000 	>  mov ebx,offset hexValueTemplate
  71      00
  71 008d E87BFFFF 	>  call hex2string
  71      FF
  71              	>  writeMessage hexValueMessage,hexValueMessageLen
  71 0092 B9020000 	>>  mov ecx,offset hexValueMessage
  71      00
  71 0097 BA180000 	>>  mov edx,hexValueMessageLen
  71      00
  71 009c E85FFFFF 	>>  call write_message
  71      FF
  71 00a1 61       	>  popa 
  72              	
  73              	
  74              	
  75              	        writeMessage fpuDivideZeroByZeroMessage, fpuDivideZeroByZeroMessageLength
  75 00a2 B92A0000 	>  mov ecx,offset fpuDivideZeroByZeroMessage
  75      00
  75 00a7 BA080000 	>  mov edx,fpuDivideZeroByZeroMessageLength
  75      00
  75 00ac E84FFFFF 	>  call write_message
  75      FF
  76              	
  77 00b1 D9EE     	        fldz                         # nacteni FP konstanty 0.0
  78 00b3 D9EE     	        fldz                         # nacteni FP konstanty 0.0
  79 00b5 DEF9     	        fdivp                        # vypocet 0.0/0.0
  80 00b7 D91D0000 	        fstp dword ptr number        # ulozeni do pameti (4 bajty)
  80      0000
  81 00bd A1000000 	        mov  eax, dword ptr number   # nacteni hodnoty, tentokrat to celociselneho registru
  81      00
  82              	        printHexNumber eax           # vytiskneme celociselnou hodnotu v hexa tvaru
  82 00c2 60       	>  pusha 
  82 00c3 89C2     	>  mov edx,eax
  82 00c5 BB100000 	>  mov ebx,offset hexValueTemplate
  82      00
  82 00ca E83EFFFF 	>  call hex2string
  82      FF
  82              	>  writeMessage hexValueMessage,hexValueMessageLen
  82 00cf B9020000 	>>  mov ecx,offset hexValueMessage
  82      00
  82 00d4 BA180000 	>>  mov edx,hexValueMessageLen
  82      00
  82 00d9 E822FFFF 	>>  call write_message
  82      FF
  82 00de 61       	>  popa 
  83              	
  84              	
  85              	
  86              	        println                      # odradkovani
  86              	>  writeMessage printlnMessage,printlnLength
  86 00df B9000000 	>>  mov ecx,offset printlnMessage
GAS LISTING main.s 			page 6


  86      00
  86 00e4 BA020000 	>>  mov edx,printlnLength
  86      00
  86 00e9 E812FFFF 	>>  call write_message
  86      FF
  87              	
  88              	        exit                         # ukonceni aplikace
  88 00ee B8010000 	>  mov eax,sys_exit
  88      00
  88 00f3 BB000000 	>  mov ebx,0
  88      00
  88 00f8 CD80     	>  int 0x80
  89              	
