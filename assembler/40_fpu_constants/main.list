GAS LISTING main.s 			page 1


   1              	# asmsyntax=as
   2              	
   3              	# Program pro otestovani zakladnich FPU operaci
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	.intel_syntax noprefix
   9              	
  10              	
  11              	
  12              	# Nacteni definice makra pro ukonceni aplikace
  13              	.include "exit.s"
   1              	# asmsyntax=as
   2              	
   3              	# Makro pro ukonceni procesu v Linuxu.
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	sys_exit   = 1                       # cislo syscallu pro ukonceni procesu
   9              	
  10              	# Deklarace makra pro ukonceni aplikace
  11              	.macro exit
  12              	        mov   eax, sys_exit          # cislo sycallu pro funkci "exit"
  13              	        mov   ebx, 0                 # exit code = 0
  14              	        int   0x80                   # volani Linuxoveho kernelu
  15              	.endm
  16              	
  14              	
  15              	# Nacteni maker pro (opakovany) tisk zpravy i prislusne subrutiny
  16              	.include "writeMessage.s"
   1              	# asmsyntax=as
   2              	
   3              	# Makro pro tisk zpravy na standardni vystup.
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	# Linux kernel system call table
   9              	sys_write  = 4
  10              	std_output = 1
  11              	
  12              	
  13              	
  14              	# Deklarace makra pro vytisteni zpravy na standardni vystup
  15              	.macro writeMessage message,messageLength
  16              	        mov   ecx, offset \message   # adresa retezce, ktery se ma vytisknout
  17              	        mov   edx, \messageLength    # pocet znaku, ktere se maji vytisknout
  18              	        call  write_message          # vytisknout zpravu "Zero flag not set"
  19              	.endm
  20              	
  21              	
  22              	
  23              	# Podprogram pro vytisteni zpravy na standardni vystup
  24              	# Ocekava se, ze v ecx bude adresa zpravy a v edx jeji delka
  25              	write_message:
GAS LISTING main.s 			page 2


  26 0000 B8040000 	        mov   eax, sys_write         # cislo syscallu pro funkci "write"
  26      00
  27 0005 BB010000 	        mov   ebx, std_output        # standardni vystup
  27      00
  28 000a CD80     	        int   0x80
  29 000c C3       	        ret
  30              	
  31              	
  32              	
  33              	# Deklarace makra pro vytisteni znaku konce radku (provede se tedy odradkovani)
  34              	.macro println
  35              	        writeMessage printlnMessage,printlnLength
  36              	.endm
  37              	
  38              	
  39              	
  40              	#-----------------------------------------------------------------------------
  41              	.section .data
  42              	# Miniretezec pouzivany makrem println
  43              	printlnMessage:
  44 0000 0A00     	        .string "\n"
  45              	printlnLength = $ - printlnMessage
  46              	
  17              	
  18              	# Nacteni makra pro vytisteni hexadecimalni 32bitove hodnoty
  19              	# spolecne s makrem je nactena i prislusna subrutina
  20              	.include "printHexNumber.s"
   1              	# asmsyntax=as
   2              	
   3              	# Makro pro pripravu a tisk hexadecimalni hodnoty na standardni vystup.
   4              	# - pro zapis je pouzita "Intel" syntaxe.
   5              	#
   6              	# Autor: Pavel Tisnovsky
   7              	
   8              	.intel_syntax noprefix
   9              	
  10              	
  11              	
  12              	# Makro pro vypis 32bitove hexadecimalni hodnoty na standardni vystup
  13              	# Jedinym parametrem makra je hodnota (konstanta)
  14              	.macro printHexNumber value
  15              	        pusha                              # uschovat vsechny registry na zasobnik
  16              	        mov  edx, \value                   # hodnotu pro tisk ulozit do registru EDX
  17              	        mov  ebx, offset hexValueTemplate  # adresu pro retezec ulozit do registru EBX
  18              	        call hex2string                    # zavolani prislusne subrutiny pro prevod na string
  19              	        writeMessage hexValueMessage, hexValueMessageLen # retezec je naplnen, tak ho muzeme vytisk
  20              	        popa                               # obnovit obsah vsech registru
  21              	.endm
  22              	
  23              	
  24              	
  25              	#-----------------------------------------------------------------------------
  26              	.section .data
  27              	hexValueMessage:
  28 0002 48657820 	        .string "Hex value: 0x"             # prvni cast zpravy
  28      76616C75 
  28      653A2030 
GAS LISTING main.s 			page 3


  28      7800
  29              	hexValueTemplate:                           # druha cast zpravy ma vlastni navesti
  30 0010 3F3F3F3F 	        .string "????????\n"                # otazniky budou prepsany
  30      3F3F3F3F 
  30      0A00
  31              	hexValueMessageLen = $ - hexValueMessage    # delka zpravy
  32              	
  33              	
  34              	
  35              	#-----------------------------------------------------------------------------
  36              	.section .text
  37              	
  38              	# Subrutina urcena pro prevod 32bitove hexadecimalni hodnoty na retezec
  39              	# Vstup: EDX - hodnota, ktera se ma prevest na retezec
  40              	#        EBX - adresa jiz drive alokovaneho retezce (resp. osmice bajtu)
  41              	hex2string:
  42 000d B108     	                  mov cl,  8                # pocet opakovani smycky
  43              	
  44 000f C1C204   	print_one_digit:  rol edx, 4                # rotace doleva znamena, ze se do spodnich 4 bitu nasun
  45 0012 88D0     	                  mov al, dl                # nechceme porusit obsah vstupni hodnoty v EDX, proto p
  46 0014 240F     	                  and al, 0x0f              # maskovani, potrebujeme pracovat jen s jednou cifrou
  47 0016 3C0A     	                  cmp al, 10                # je cifra vetsi nebo rovna 10?
  48 0018 7C02     	                  jl  store_digit           # neni, pouze prevest 0..9 na ASCII hodnotu '0'..'9'
  49              	
  50 001a 0407     	alpha_digit:      add al, 'A'-10-'0'        # prevod hodnoty 10..15 na znaky 'A'..'F'
  51              	
  52 001c 0430     	store_digit:      add al, '0'
  53 001e 8803     	                  mov byte ptr [ebx], al    # ulozeni cifry do retezce
  54 0020 43       	                  inc ebx                   # dalsi ulozeni v retezci o znak dale
  55 0021 FEC9     	                  dec cl                    # snizeni pocitadla smycky
  56 0023 75EA     	                  jnz print_one_digit       # a opakovani smycky, dokud se nedosahlo nuly
  57              	
  58 0025 C3       	                  ret                       # navrat ze subrutiny
  59              	
  21              	
  22              	
  23              	
  24              	#-----------------------------------------------------------------------------
  25              	.section .data
  26              	fpuValueZeroMessage:
  27 001a 302E303A 	        .string "0.0: "                             # zprava
  27      2000
  28              	fpuValueZeroMessageLength = $ - fpuValueZeroMessage # delka zpravy
  29              	
  30              	fpuValueOneMessage:
  31 0020 312E303A 	        .string "1.0: "                             # zprava
  31      2000
  32              	fpuValueOneMessageLength = $ - fpuValueOneMessage   # delka zpravy
  33              	
  34              	fpuValuePiMessage:
  35 0026 50693A20 	        .string "Pi:  "                             # zprava
  35      2000
  36              	fpuValuePiMessageLength = $ - fpuValuePiMessage     # delka zpravy
  37              	
  38              	
  39              	
  40              	#-----------------------------------------------------------------------------
GAS LISTING main.s 			page 4


  41              	.section .bss
  42              	
  43              	.lcomm number, 4                     # na toto misto se bude ukladat konstanta typu float
  44              	
  45              	
  46              	
  47              	#-----------------------------------------------------------------------------
  48              	.section .text
  49              	        .global _start               # tento symbol ma byt dostupny i linkeru
  50              	
  51              	_start:
  52              	        writeMessage fpuValueZeroMessage, fpuValueZeroMessageLength
  52 0026 B91A0000 	>  mov ecx,offset fpuValueZeroMessage
  52      00
  52 002b BA060000 	>  mov edx,fpuValueZeroMessageLength
  52      00
  52 0030 E8CBFFFF 	>  call write_message
  52      FF
  53              	
  54 0035 D9EE     	        fldz                         # nacteni FP konstanty 0.0
  55 0037 D91D0000 	        fstp dword ptr number        # ulozeni do pameti (4 bajty)
  55      0000
  56 003d A1000000 	        mov  eax, dword ptr number   # nacteni hodnoty, tentokrat to celociselneho registru
  56      00
  57              	        printHexNumber eax           # vytiskneme celociselnou hodnotu v hexa tvaru
  57 0042 60       	>  pusha 
  57 0043 89C2     	>  mov edx,eax
  57 0045 BB100000 	>  mov ebx,offset hexValueTemplate
  57      00
  57 004a E8BEFFFF 	>  call hex2string
  57      FF
  57              	>  writeMessage hexValueMessage,hexValueMessageLen
  57 004f B9020000 	>>  mov ecx,offset hexValueMessage
  57      00
  57 0054 BA180000 	>>  mov edx,hexValueMessageLen
  57      00
  57 0059 E8A2FFFF 	>>  call write_message
  57      FF
  57 005e 61       	>  popa 
  58              	
  59              	
  60              	
  61              	        writeMessage fpuValueOneMessage, fpuValueOneMessageLength
  61 005f B9200000 	>  mov ecx,offset fpuValueOneMessage
  61      00
  61 0064 BA060000 	>  mov edx,fpuValueOneMessageLength
  61      00
  61 0069 E892FFFF 	>  call write_message
  61      FF
  62              	
  63 006e D9E8     	        fld1                         # nacteni FP konstanty 1.0
  64 0070 D91D0000 	        fstp dword ptr number        # ulozeni do pameti (4 bajty)
  64      0000
  65 0076 A1000000 	        mov  eax, dword ptr number   # nacteni hodnoty, tentokrat to celociselneho registru
  65      00
  66              	        printHexNumber eax           # vytiskneme celociselnou hodnotu v hexa tvaru
  66 007b 60       	>  pusha 
GAS LISTING main.s 			page 5


  66 007c 89C2     	>  mov edx,eax
  66 007e BB100000 	>  mov ebx,offset hexValueTemplate
  66      00
  66 0083 E885FFFF 	>  call hex2string
  66      FF
  66              	>  writeMessage hexValueMessage,hexValueMessageLen
  66 0088 B9020000 	>>  mov ecx,offset hexValueMessage
  66      00
  66 008d BA180000 	>>  mov edx,hexValueMessageLen
  66      00
  66 0092 E869FFFF 	>>  call write_message
  66      FF
  66 0097 61       	>  popa 
  67              	
  68              	
  69              	
  70              	        writeMessage fpuValuePiMessage, fpuValuePiMessageLength
  70 0098 B9260000 	>  mov ecx,offset fpuValuePiMessage
  70      00
  70 009d BA060000 	>  mov edx,fpuValuePiMessageLength
  70      00
  70 00a2 E859FFFF 	>  call write_message
  70      FF
  71              	
  72 00a7 D9EB     	        fldpi                        # nacteni FP konstanty Pi
  73 00a9 D91D0000 	        fstp dword ptr number        # ulozeni do pameti (4 bajty)
  73      0000
  74 00af A1000000 	        mov  eax, dword ptr number   # nacteni hodnoty, tentokrat to celociselneho registru
  74      00
  75              	        printHexNumber eax           # vytiskneme celociselnou hodnotu v hexa tvaru
  75 00b4 60       	>  pusha 
  75 00b5 89C2     	>  mov edx,eax
  75 00b7 BB100000 	>  mov ebx,offset hexValueTemplate
  75      00
  75 00bc E84CFFFF 	>  call hex2string
  75      FF
  75              	>  writeMessage hexValueMessage,hexValueMessageLen
  75 00c1 B9020000 	>>  mov ecx,offset hexValueMessage
  75      00
  75 00c6 BA180000 	>>  mov edx,hexValueMessageLen
  75      00
  75 00cb E830FFFF 	>>  call write_message
  75      FF
  75 00d0 61       	>  popa 
  76              	
  77              	
  78              	
  79              	        println                      # odradkovani
  79              	>  writeMessage printlnMessage,printlnLength
  79 00d1 B9000000 	>>  mov ecx,offset printlnMessage
  79      00
  79 00d6 BA020000 	>>  mov edx,printlnLength
  79      00
  79 00db E820FFFF 	>>  call write_message
  79      FF
  80              	
  81              	        exit                         # ukonceni aplikace
GAS LISTING main.s 			page 6


  81 00e0 B8010000 	>  mov eax,sys_exit
  81      00
  81 00e5 BB000000 	>  mov ebx,0
  81      00
  81 00ea CD80     	>  int 0x80
  82              	
